{"mappings":"ACGA,IAAM,EAAU,AADM,SAAS,aAAa,CAAC,YACf,gBAAgB,CAAC,MAEzC,EAAY,SAAC,CAAnB,EACE,IAAM,EAAO,SAAS,gBAAgB,CAAC,YACjC,EAAS,EAAE,CAEjB,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,EAAO,IAAI,CAAC,EAAI,KAAK,CAAC,EAAM,CAAC,SAAS,CAAC,CAAA,GACzC,GAEA,EAAO,IAAI,CAAC,SAAC,CAAA,CAAG,CAAhB,EACE,IAAM,EAAQ,EAAE,SAAS,CAAC,IAAI,GACxB,EAAQ,EAAE,SAAS,CAAC,IAAI,GAExB,EAAsB,SAAC,CAA7B,EACE,OAAO,WAAW,EAAK,OAAO,CAAC,QAAS,IAC1C,EAEM,EAAS,EAAoB,GAC7B,EAAS,EAAoB,UAEnC,AAAI,AAAC,MAAM,IAAY,MAAM,GAGpB,EAAM,aAAa,CAAC,GAFpB,EAAS,CAIpB,GAEA,EAAO,OAAO,CAAC,SAAC,CAAA,CAAM,CAAtB,EACE,CAAI,CAAC,EAAE,CAAC,YAAY,CAAC,EAAM,CAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAM,CACjD,EACF,EAEA,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAK,CAAtB,EACE,EAAI,gBAAgB,CAAC,QAAS,WAAM,OAAA,EAAU,E,EAChD","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar headerOfTable = document.querySelector(\"thead tr\");\nvar headers = headerOfTable.querySelectorAll(\"th\");\nvar sortTable = function(index) {\n    var rows = document.querySelectorAll(\"tbody tr\");\n    var column = [];\n    rows.forEach(function(row) {\n        column.push(row.cells[index].cloneNode(true));\n    });\n    column.sort(function(a, b) {\n        var textA = a.innerText.trim();\n        var textB = b.innerText.trim();\n        var extractNumericValue = function(text) {\n            return parseFloat(text.replace(/[$,]/g, \"\"));\n        };\n        var valueA = extractNumericValue(textA);\n        var valueB = extractNumericValue(textB);\n        if (!isNaN(valueA) && !isNaN(valueB)) return valueA - valueB;\n        else return textA.localeCompare(textB);\n    });\n    column.forEach(function(cell, i) {\n        rows[i].replaceChild(cell, rows[i].cells[index]);\n    });\n};\nheaders.forEach(function(nav, index) {\n    nav.addEventListener(\"click\", function() {\n        return sortTable(index);\n    });\n});\n\n//# sourceMappingURL=index.be450b11.js.map\n","'use strict';\n\nconst headerOfTable = document.querySelector('thead tr');\nconst headers = headerOfTable.querySelectorAll('th');\n\nconst sortTable = (index) => {\n  const rows = document.querySelectorAll('tbody tr');\n  const column = [];\n\n  rows.forEach((row) => {\n    column.push(row.cells[index].cloneNode(true));\n  });\n\n  column.sort((a, b) => {\n    const textA = a.innerText.trim();\n    const textB = b.innerText.trim();\n\n    const extractNumericValue = (text) => {\n      return parseFloat(text.replace(/[$,]/g, ''));\n    };\n\n    const valueA = extractNumericValue(textA);\n    const valueB = extractNumericValue(textB);\n\n    if (!isNaN(valueA) && !isNaN(valueB)) {\n      return valueA - valueB;\n    } else {\n      return textA.localeCompare(textB);\n    }\n  });\n\n  column.forEach((cell, i) => {\n    rows[i].replaceChild(cell, rows[i].cells[index]);\n  });\n};\n\nheaders.forEach((nav, index) => {\n  nav.addEventListener('click', () => sortTable(index));\n});\n"],"names":["headers","headerOfTable","document","querySelector","querySelectorAll","sortTable","index","rows","column","forEach","row","push","cells","cloneNode","sort","a","b","textA","innerText","trim","textB","extractNumericValue","text","parseFloat","replace","valueA","valueB","isNaN","localeCompare","cell","i","replaceChild","nav","addEventListener"],"version":3,"file":"index.be450b11.js.map"}